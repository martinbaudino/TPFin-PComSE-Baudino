
base_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000350c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003750  08003750  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003758  08003758  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000f0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000babc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca3  00000000  00000000  0002bb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ebd  00000000  00000000  0002ea78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca47  00000000  00000000  00053935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dabdc  00000000  00000000  0006037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013af58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029a0  00000000  00000000  0013afa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080036a4 	.word	0x080036a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080036a4 	.word	0x080036a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a8:	f000 fcbc 	bl	8000f24 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80005ac:	f000 f81a 	bl	80005e4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005b0:	f000 f884 	bl	80006bc <MX_GPIO_Init>
	if (!init_comm()) {
 80005b4:	f000 fb92 	bl	8000cdc <init_comm>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f083 0301 	eor.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <main+0x24>
		Error_Handler();
 80005c4:	f000 fa0a 	bl	80009dc <Error_Handler>
	}
	if (!init_sens_fsm()) {
 80005c8:	f000 f958 	bl	800087c <init_sens_fsm>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f083 0301 	eor.w	r3, r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <main+0x38>
		Error_Handler();
 80005d8:	f000 fa00 	bl	80009dc <Error_Handler>
	}

	/* Infinite loop */
	while (1) {
		update_sens_fsm();
 80005dc:	f000 f95c 	bl	8000898 <update_sens_fsm>
 80005e0:	e7fc      	b.n	80005dc <main+0x38>
	...

080005e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fbe0 	bl	8002db8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd4>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000648:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f829 	bl	80016c4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
		Error_Handler();
 8000678:	f000 f9b0 	bl	80009dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fa8a 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc6>
		Error_Handler();
 80006a6:	f000 f999 	bl	80009dc <Error_Handler>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
 80006d6:	4b64      	ldr	r3, [pc, #400]	; (8000868 <MX_GPIO_Init+0x1ac>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a63      	ldr	r2, [pc, #396]	; (8000868 <MX_GPIO_Init+0x1ac>)
 80006dc:	f043 0310 	orr.w	r3, r3, #16
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b61      	ldr	r3, [pc, #388]	; (8000868 <MX_GPIO_Init+0x1ac>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	623b      	str	r3, [r7, #32]
 80006ec:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	4b5d      	ldr	r3, [pc, #372]	; (8000868 <MX_GPIO_Init+0x1ac>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a5c      	ldr	r2, [pc, #368]	; (8000868 <MX_GPIO_Init+0x1ac>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b5a      	ldr	r3, [pc, #360]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	61fb      	str	r3, [r7, #28]
 8000708:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4b56      	ldr	r3, [pc, #344]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a55      	ldr	r2, [pc, #340]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000714:	f043 0320 	orr.w	r3, r3, #32
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b53      	ldr	r3, [pc, #332]	; (8000868 <MX_GPIO_Init+0x1ac>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0320 	and.w	r3, r3, #32
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b4f      	ldr	r3, [pc, #316]	; (8000868 <MX_GPIO_Init+0x1ac>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a4e      	ldr	r2, [pc, #312]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b48      	ldr	r3, [pc, #288]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a47      	ldr	r2, [pc, #284]	; (8000868 <MX_GPIO_Init+0x1ac>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b45      	ldr	r3, [pc, #276]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a40      	ldr	r2, [pc, #256]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a39      	ldr	r2, [pc, #228]	; (8000868 <MX_GPIO_Init+0x1ac>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_GPIO_Init+0x1ac>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <MX_GPIO_Init+0x1ac>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a32      	ldr	r2, [pc, #200]	; (8000868 <MX_GPIO_Init+0x1ac>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <MX_GPIO_Init+0x1ac>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007b8:	482c      	ldr	r0, [pc, #176]	; (800086c <MX_GPIO_Init+0x1b0>)
 80007ba:	f000 ff1b 	bl	80015f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80007be:	2200      	movs	r2, #0
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	482b      	ldr	r0, [pc, #172]	; (8000870 <MX_GPIO_Init+0x1b4>)
 80007c4:	f000 ff16 	bl	80015f4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4825      	ldr	r0, [pc, #148]	; (8000874 <MX_GPIO_Init+0x1b8>)
 80007e0:	f000 fd44 	bl	800126c <HAL_GPIO_Init>

	/*Configure GPIO pin : PF8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4619      	mov	r1, r3
 80007f8:	481f      	ldr	r0, [pc, #124]	; (8000878 <MX_GPIO_Init+0x1bc>)
 80007fa:	f000 fd37 	bl	800126c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80007fe:	f244 0381 	movw	r3, #16513	; 0x4081
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	4619      	mov	r1, r3
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <MX_GPIO_Init+0x1b0>)
 8000818:	f000 fd28 	bl	800126c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <MX_GPIO_Init+0x1b4>)
 8000834:	f000 fd1a 	bl	800126c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <MX_GPIO_Init+0x1b4>)
 800084c:	f000 fd0e 	bl	800126c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f000 fcd2 	bl	80011fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800085a:	2028      	movs	r0, #40	; 0x28
 800085c:	f000 fceb 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 8000860:	bf00      	nop
 8000862:	3738      	adds	r7, #56	; 0x38
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020400 	.word	0x40020400
 8000870:	40021800 	.word	0x40021800
 8000874:	40020800 	.word	0x40020800
 8000878:	40021400 	.word	0x40021400

0800087c <init_sens_fsm>:

bool init_sens_fsm(void) {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	globalFSM = E0Sleep;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <init_sens_fsm+0x18>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	return true;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000a8 	.word	0x200000a8

08000898 <update_sens_fsm>:

void update_sens_fsm(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch (globalFSM) {
 800089c:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <update_sens_fsm+0x108>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d876      	bhi.n	8000992 <update_sens_fsm+0xfa>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <update_sens_fsm+0x14>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008d5 	.word	0x080008d5
 80008b4:	080008fb 	.word	0x080008fb
 80008b8:	08000915 	.word	0x08000915
	case E0Sleep:

		/* Se debe suspender el Tick para que no se despierte cada 1ms */
		HAL_SuspendTick();
 80008bc:	f000 fba4 	bl	8001008 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008c0:	2101      	movs	r1, #1
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 fee2 	bl	800168c <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 80008c8:	f000 fbae 	bl	8001028 <HAL_ResumeTick>

		globalFSM = E1ConfigADC;
 80008cc:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <update_sens_fsm+0x108>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
		break;
 80008d2:	e062      	b.n	800099a <update_sens_fsm+0x102>
	case E1ConfigADC:
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	4832      	ldr	r0, [pc, #200]	; (80009a4 <update_sens_fsm+0x10c>)
 80008da:	f000 fe8b 	bl	80015f4 <HAL_GPIO_WritePin>

		if (!init_ads()) {
 80008de:	f000 f9e6 	bl	8000cae <init_ads>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f083 0301 	eor.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <update_sens_fsm+0x5a>
			Error_Handler();
 80008ee:	f000 f875 	bl	80009dc <Error_Handler>
		}

		globalFSM = E2ReadADC;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <update_sens_fsm+0x108>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
		break;
 80008f8:	e04f      	b.n	800099a <update_sens_fsm+0x102>
	case E2ReadADC:

		if (read_ads(ADS1018_Data, ADS_FULLDATA) != ADS_FULLDATA) {
 80008fa:	2103      	movs	r1, #3
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <update_sens_fsm+0x110>)
 80008fe:	f000 f9dd 	bl	8000cbc <read_ads>
 8000902:	4603      	mov	r3, r0
 8000904:	2b03      	cmp	r3, #3
 8000906:	d001      	beq.n	800090c <update_sens_fsm+0x74>
			Error_Handler();
 8000908:	f000 f868 	bl	80009dc <Error_Handler>
		}

		globalFSM = E3SendUart;
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <update_sens_fsm+0x108>)
 800090e:	2203      	movs	r2, #3
 8000910:	701a      	strb	r2, [r3, #0]
		break;
 8000912:	e042      	b.n	800099a <update_sens_fsm+0x102>
	case E3SendUart:
		sprintf((char*) str, "T1:0x%04x\t", ADS1018_Data[0]);
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <update_sens_fsm+0x110>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4924      	ldr	r1, [pc, #144]	; (80009ac <update_sens_fsm+0x114>)
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <update_sens_fsm+0x118>)
 800091e:	f002 fa53 	bl	8002dc8 <siprintf>
		if (!tx_data(str)) {
 8000922:	4823      	ldr	r0, [pc, #140]	; (80009b0 <update_sens_fsm+0x118>)
 8000924:	f000 f9e1 	bl	8000cea <tx_data>
 8000928:	4603      	mov	r3, r0
 800092a:	f083 0301 	eor.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <update_sens_fsm+0xa0>
			Error_Handler();
 8000934:	f000 f852 	bl	80009dc <Error_Handler>
		}

		sprintf((char*) str, "T2: 0x%04x\t", ADS1018_Data[1]);
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <update_sens_fsm+0x110>)
 800093a:	885b      	ldrh	r3, [r3, #2]
 800093c:	461a      	mov	r2, r3
 800093e:	491d      	ldr	r1, [pc, #116]	; (80009b4 <update_sens_fsm+0x11c>)
 8000940:	481b      	ldr	r0, [pc, #108]	; (80009b0 <update_sens_fsm+0x118>)
 8000942:	f002 fa41 	bl	8002dc8 <siprintf>
		if (!tx_data(str)) {
 8000946:	481a      	ldr	r0, [pc, #104]	; (80009b0 <update_sens_fsm+0x118>)
 8000948:	f000 f9cf 	bl	8000cea <tx_data>
 800094c:	4603      	mov	r3, r0
 800094e:	f083 0301 	eor.w	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <update_sens_fsm+0xc4>
			Error_Handler();
 8000958:	f000 f840 	bl	80009dc <Error_Handler>
		}

		sprintf((char*) str, "TIn: 0x%04x\r\n", ADS1018_Data[2]);
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <update_sens_fsm+0x110>)
 800095e:	889b      	ldrh	r3, [r3, #4]
 8000960:	461a      	mov	r2, r3
 8000962:	4915      	ldr	r1, [pc, #84]	; (80009b8 <update_sens_fsm+0x120>)
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <update_sens_fsm+0x118>)
 8000966:	f002 fa2f 	bl	8002dc8 <siprintf>
		if (!tx_data(str)) {
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <update_sens_fsm+0x118>)
 800096c:	f000 f9bd 	bl	8000cea <tx_data>
 8000970:	4603      	mov	r3, r0
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <update_sens_fsm+0xe8>
			Error_Handler();
 800097c:	f000 f82e 	bl	80009dc <Error_Handler>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <update_sens_fsm+0x10c>)
 8000986:	f000 fe35 	bl	80015f4 <HAL_GPIO_WritePin>

		globalFSM = E0Sleep;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <update_sens_fsm+0x108>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
		break;
 8000990:	e003      	b.n	800099a <update_sens_fsm+0x102>
	default:
		globalFSM = E0Sleep;
 8000992:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <update_sens_fsm+0x108>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
		break;
 8000998:	bf00      	nop
	}
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000a8 	.word	0x200000a8
 80009a4:	40020400 	.word	0x40020400
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	080036bc 	.word	0x080036bc
 80009b0:	20000094 	.word	0x20000094
 80009b4:	080036c8 	.word	0x080036c8
 80009b8:	080036d4 	.word	0x080036d4

080009bc <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009c6:	2101      	movs	r1, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009ca:	f000 fe2c 	bl	8001626 <HAL_GPIO_TogglePin>
	/* NOTE: This function Should not be modified, when the callback is needed,
	 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40020400 	.word	0x40020400

080009dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ea:	4802      	ldr	r0, [pc, #8]	; (80009f4 <Error_Handler+0x18>)
 80009ec:	f000 fe02 	bl	80015f4 <HAL_GPIO_WritePin>
	while (1) {
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x14>
 80009f2:	bf00      	nop
 80009f4:	40020400 	.word	0x40020400

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000aa2:	2374      	movs	r3, #116	; 0x74
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_SPI_MspInit+0x8c>)
 8000abe:	f000 fbd5 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013400 	.word	0x40013400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_UART_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12c      	bne.n	8000b54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_UART_MspInit+0x88>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_UART_MspInit+0x88>)
 8000b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_UART_MspInit+0x88>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_UART_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_UART_MspInit+0x88>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_UART_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_UART_MspInit+0x8c>)
 8000b50:	f000 fb8c 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 fa08 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc4:	f000 fd4a 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f002 f8b2 	bl	8002d64 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20030000 	.word	0x20030000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	20000160 	.word	0x20000160

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f002 f871 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc89 	bl	80005a4 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ca0:	08003760 	.word	0x08003760
  ldr r2, =_sbss
 8000ca4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca8:	20000160 	.word	0x20000160

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>

08000cae <init_ads>:
 * @brief Inicializa el ADS1018 de manera abstracta
 *
 * @return Verdadero o falso, depende del resultado de la inicialización del
 * hardware específico
 */
bool init_ads(void) {
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
	return init_ads_spi();
 8000cb2:	f000 f827 	bl	8000d04 <init_ads_spi>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <read_ads>:
 *
 * @param dataBuffer Memoria reservada para lectura de datos
 * @param buffSize Cantidad de valores a leer
 * @return Verdadero o falso, depende del resultado de la lectura del hardware
 */
uint8_t read_ads(uint16_t *dataBuffer, uint8_t buffSize) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]

	return read_ads_data(dataBuffer, buffSize);
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f881 	bl	8000dd4 <read_ads_data>
 8000cd2:	4603      	mov	r3, r0

}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <init_comm>:
 * @brief Inicializa una interfaz de comunicación de manera abstracta
 *
 * @return Verdadero o falso, depende del resultado de la inicialización del
 * hardware específico
 */
bool init_comm(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	return init_uart();
 8000ce0:	f000 f8d0 	bl	8000e84 <init_uart>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <tx_data>:
 *
 * @param dataBuffer Memoria reservada para lectura de datos
 * @return Verdadero o falso, depende del resultado de la operación del
 * hardware
 */
bool tx_data(uint8_t *dataBuffer) {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	return tx_uart(dataBuffer);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f8f6 	bl	8000ee4 <tx_uart>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <init_ads_spi>:
 * (CPHA=1).
 *
 * @return Verdadero o falso, depende del resultado de la inicialización del
 * periférico SPI4
 */
bool init_ads_spi(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	hspi4.Instance = SPI4;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <init_ads_spi+0x68>)
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <init_ads_spi+0x6c>)
 8000d0c:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <init_ads_spi+0x68>)
 8000d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d14:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <init_ads_spi+0x68>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <init_ads_spi+0x68>)
 8000d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d22:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <init_ads_spi+0x68>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <init_ads_spi+0x68>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <init_ads_spi+0x68>)
 8000d32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d36:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <init_ads_spi+0x68>)
 8000d3a:	2238      	movs	r2, #56	; 0x38
 8000d3c:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <init_ads_spi+0x68>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <init_ads_spi+0x68>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <init_ads_spi+0x68>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 10;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <init_ads_spi+0x68>)
 8000d52:	220a      	movs	r2, #10
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi4) == HAL_OK) {
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <init_ads_spi+0x68>)
 8000d58:	f001 f94c 	bl	8001ff4 <HAL_SPI_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <init_ads_spi+0x62>
		return true;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <init_ads_spi+0x64>
	}
	return false;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000b0 	.word	0x200000b0
 8000d70:	40013400 	.word	0x40013400

08000d74 <tx_rx_spi>:
 * alrededor de 600ns.
 *
 * @param configWord Palabra de configuración para captura del ADS1018
 * @return Valor adquirido según anterior palabra de configuración
 */
uint16_t tx_rx_spi(uint16_t configWord) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]

	uint16_t response;
	uint8_t j;

	HAL_SPI_TransmitReceive(&hspi4, (uint8_t*) &configWord,
 8000d7e:	f107 020c 	add.w	r2, r7, #12
 8000d82:	1db9      	adds	r1, r7, #6
 8000d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <tx_rx_spi+0x5c>)
 8000d8e:	f001 f9ba 	bl	8002106 <HAL_SPI_TransmitReceive>
			(uint8_t*) &response, 1, MAX_TIMEOUT);

	/* Hace que el módulo SPI genere un pulso de 600ns sobre la señal de habilitación */
	__HAL_SPI_DISABLE(&hspi4);
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <tx_rx_spi+0x5c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <tx_rx_spi+0x5c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000da0:	601a      	str	r2, [r3, #0]
	for (j = 0; j < 20; j++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e002      	b.n	8000dae <tx_rx_spi+0x3a>
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b13      	cmp	r3, #19
 8000db2:	d9f9      	bls.n	8000da8 <tx_rx_spi+0x34>
		;
	__HAL_SPI_ENABLE(&hspi4);
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <tx_rx_spi+0x5c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <tx_rx_spi+0x5c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dc2:	601a      	str	r2, [r3, #0]

	return response;
 8000dc4:	89bb      	ldrh	r3, [r7, #12]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000b0 	.word	0x200000b0

08000dd4 <read_ads_data>:
 *
 * @param readBuffer Memoria reservada para lectura de datos
 * @param buffSize Cantidad de valores a leer
 * @return
 */
uint8_t read_ads_data(uint16_t *readBuffer, uint8_t buffSize) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]

	uint16_t configADC[4] = {
 8000de0:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <read_ads_data+0xa4>)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dea:	e883 0003 	stmia.w	r3, {r0, r1}
	ADS1018_CFG_SS | ADS1018_CFG_TINT | ADS1018_CFG_PGA | ADS1018_CFG_MODE
			| ADS1018_CFG_DR | ADS1018_CFG_PU_EN | ADS1018_CFG_NOP
			| ADS1018_CFG_RSV, 0x0001 };
	uint8_t i;

	if (readBuffer != NULL) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d03b      	beq.n	8000e6c <read_ads_data+0x98>
		/** Envía la primera palabra de configuración. Se descarta el dato
		 * recibido porque es de la medición anterior
		 */
		tx_rx_spi(configADC[0]);
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffbc 	bl	8000d74 <tx_rx_spi>

		/**
		 *  Envía sucesivas palabras de configuración y recupera datos útiles
		 */
		for (i = 0; i < 3; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	75fb      	strb	r3, [r7, #23]
 8000e00:	e027      	b.n	8000e52 <read_ads_data+0x7e>
			// Espera que indique dato nuevo disponible
			while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8) == 0)
 8000e02:	bf00      	nop
 8000e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e08:	481c      	ldr	r0, [pc, #112]	; (8000e7c <read_ads_data+0xa8>)
 8000e0a:	f000 fbdb 	bl	80015c4 <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f7      	beq.n	8000e04 <read_ads_data+0x30>
				;
			while (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8) == 1)
 8000e14:	bf00      	nop
 8000e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1a:	4818      	ldr	r0, [pc, #96]	; (8000e7c <read_ads_data+0xa8>)
 8000e1c:	f000 fbd2 	bl	80015c4 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d0f7      	beq.n	8000e16 <read_ads_data+0x42>
			/**
			 * El ADS1018 es un ADC de 12 bits y devuelve valores adquiridos
			 * en una palabra de 16 bits justificados a la izquierda: es
			 *  necesario corregir esto antes de devolver los datos.
			 */
			readBuffer[i] = (tx_rx_spi(configADC[i + 1])) >> 4;
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	443b      	add	r3, r7
 8000e30:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff9d 	bl	8000d74 <tx_rx_spi>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	090a      	lsrs	r2, r1, #4
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 3; i++) {
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d9d4      	bls.n	8000e02 <read_ads_data+0x2e>
		}
		/**
		 * Al finalizar el ciclo de las 4 conversiones se deshabilita el módulo SPI
		 */
		__HAL_SPI_DISABLE(&hspi4);
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <read_ads_data+0xac>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <read_ads_data+0xac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e66:	601a      	str	r2, [r3, #0]

		/**
		 * Devuelve siempre que se leyeron 3 datos
		 */
		return ADS_FULLDATA;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <read_ads_data+0x9a>
	}
	return ADS_NODATA;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	080036e4 	.word	0x080036e4
 8000e7c:	40021400 	.word	0x40021400
 8000e80:	200000b0 	.word	0x200000b0

08000e84 <init_uart>:
 * microcontrolador.
 * Por defecto configura la comunicación como  8N1 @ 115200bps
 *
 * @return Verdadero si la configuración fue exitosa y falso si falló
 */
bool init_uart(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	huart3.Instance = USART3;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <init_uart+0x54>)
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <init_uart+0x58>)
 8000e8c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <init_uart+0x54>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <init_uart+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <init_uart+0x54>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <init_uart+0x54>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <init_uart+0x54>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <init_uart+0x54>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <init_uart+0x54>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart3) == HAL_OK) {
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <init_uart+0x54>)
 8000ebc:	f001 fb90 	bl	80025e0 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <init_uart+0x4c>
		tx_uart((uint8_t*) "UART3: 8N1 @ 115200\r\n");
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <init_uart+0x5c>)
 8000ec8:	f000 f80c 	bl	8000ee4 <tx_uart>
		return true;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <init_uart+0x4e>
	}

	return true;
 8000ed0:	2301      	movs	r3, #1
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000108 	.word	0x20000108
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	080036ec 	.word	0x080036ec

08000ee4 <tx_uart>:
 * puede producir un buffer overflow si la cadena no está terminada en '\0'.
 *
 * @param dataBuffer Memoria reservada con cadena de caracteres a transmitir
 * @return Verdadero si la operación fue exitosa y falso si no lo fue
 */
bool tx_uart(uint8_t *dataBuffer) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	uint8_t buffSize;

	if (dataBuffer != NULL) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d011      	beq.n	8000f16 <tx_uart+0x32>
		buffSize = strlen((char*) dataBuffer);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff f97c 	bl	80001f0 <strlen>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]

		if (HAL_UART_Transmit(&huart3, dataBuffer, buffSize, MAX_TIMEOUT)
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <tx_uart+0x3c>)
 8000f08:	f001 fbb7 	bl	800267a <HAL_UART_Transmit>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <tx_uart+0x32>
				== HAL_OK)
			return true;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <tx_uart+0x34>
	}
	return false;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000108 	.word	0x20000108

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f94b 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fd4e 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f963 	bl	8001252 <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f92b 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	2000014c 	.word	0x2000014c

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000014c 	.word	0x2000014c

08001008 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_SuspendTick+0x1c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_SuspendTick+0x1c>)
 8001012:	f023 0302 	bic.w	r3, r3, #2
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_ResumeTick+0x1c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_ResumeTick+0x1c>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e177      	b.n	8001578 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8166 	bne.w	8001572 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80c0 	beq.w	8001572 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b66      	ldr	r3, [pc, #408]	; (8001590 <HAL_GPIO_Init+0x324>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a65      	ldr	r2, [pc, #404]	; (8001590 <HAL_GPIO_Init+0x324>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <HAL_GPIO_Init+0x324>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a61      	ldr	r2, [pc, #388]	; (8001594 <HAL_GPIO_Init+0x328>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a58      	ldr	r2, [pc, #352]	; (8001598 <HAL_GPIO_Init+0x32c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d037      	beq.n	80014aa <HAL_GPIO_Init+0x23e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a57      	ldr	r2, [pc, #348]	; (800159c <HAL_GPIO_Init+0x330>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d031      	beq.n	80014a6 <HAL_GPIO_Init+0x23a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a56      	ldr	r2, [pc, #344]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02b      	beq.n	80014a2 <HAL_GPIO_Init+0x236>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_GPIO_Init+0x338>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x232>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a54      	ldr	r2, [pc, #336]	; (80015a8 <HAL_GPIO_Init+0x33c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x22e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a53      	ldr	r2, [pc, #332]	; (80015ac <HAL_GPIO_Init+0x340>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x22a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_GPIO_Init+0x344>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a51      	ldr	r2, [pc, #324]	; (80015b4 <HAL_GPIO_Init+0x348>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x222>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a50      	ldr	r2, [pc, #320]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4f      	ldr	r2, [pc, #316]	; (80015bc <HAL_GPIO_Init+0x350>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x21a>
 8001482:	2309      	movs	r3, #9
 8001484:	e012      	b.n	80014ac <HAL_GPIO_Init+0x240>
 8001486:	230a      	movs	r3, #10
 8001488:	e010      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800148a:	2308      	movs	r3, #8
 800148c:	e00e      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800148e:	2307      	movs	r3, #7
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x240>
 8001492:	2306      	movs	r3, #6
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x240>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x240>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x240>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x240>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <HAL_GPIO_Init+0x328>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_GPIO_Init+0x354>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ee:	4a34      	ldr	r2, [pc, #208]	; (80015c0 <HAL_GPIO_Init+0x354>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <HAL_GPIO_Init+0x354>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001518:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <HAL_GPIO_Init+0x354>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_GPIO_Init+0x354>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001542:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <HAL_GPIO_Init+0x354>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_GPIO_Init+0x354>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_GPIO_Init+0x354>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae84 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40021c00 	.word	0x40021c00
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40022400 	.word	0x40022400
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e001      	b.n	80015e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001638:	887a      	ldrh	r2, [r7, #2]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	041a      	lsls	r2, r3, #16
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43d9      	mvns	r1, r3
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	400b      	ands	r3, r1
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f99e 	bl	80009bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40013c00 	.word	0x40013c00

0800168c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80016aa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80016ac:	e002      	b.n	80016b4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80016ae:	bf40      	sev
    __WFE();
 80016b0:	bf20      	wfe
    __WFE();
 80016b2:	bf20      	wfe
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e267      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b85      	ldr	r3, [pc, #532]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b82      	ldr	r3, [pc, #520]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e242      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a75      	ldr	r2, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6f      	ldr	r2, [pc, #444]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6d      	ldr	r3, [pc, #436]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6c      	ldr	r2, [pc, #432]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b69      	ldr	r3, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a68      	ldr	r2, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b66      	ldr	r3, [pc, #408]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a65      	ldr	r2, [pc, #404]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fc38 	bl	8000ff0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fc34 	bl	8000ff0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e207      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc24 	bl	8000ff0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc20 	bl	8000ff0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1f3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c7      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x244>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fbd9 	bl	8000ff0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fbd5 	bl	8000ff0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4925      	ldr	r1, [pc, #148]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x244>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fbb8 	bl	8000ff0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fbb4 	bl	8000ff0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e187      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d036      	beq.n	800191c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_RCC_OscConfig+0x248>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fb98 	bl	8000ff0 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fb94 	bl	8000ff0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e167      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
 80018e2:	e01b      	b.n	800191c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_OscConfig+0x248>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb81 	bl	8000ff0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	e00e      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb7d 	bl	8000ff0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d907      	bls.n	8001910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e150      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001904:	40023800 	.word	0x40023800
 8001908:	42470000 	.word	0x42470000
 800190c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ea      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8097 	beq.w	8001a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a73      	ldr	r2, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fb3d 	bl	8000ff0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fb39 	bl	8000ff0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e10c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x2ea>
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	4a63      	ldr	r2, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	; 0x70
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x30c>
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a5b      	ldr	r2, [pc, #364]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019d0:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d015      	beq.n	8001a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fafe 	bl	8000ff0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fafa 	bl	8000ff0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0cb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0ee      	beq.n	80019f8 <HAL_RCC_OscConfig+0x334>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fae8 	bl	8000ff0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fae4 	bl	8000ff0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0b5      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ee      	bne.n	8001a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a1 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d05c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d141      	bne.n	8001afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fab8 	bl	8000ff0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fab4 	bl	8000ff0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e087      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	019b      	lsls	r3, r3, #6
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa8d 	bl	8000ff0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fa89 	bl	8000ff0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e05c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x416>
 8001af8:	e054      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fa76 	bl	8000ff0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff fa72 	bl	8000ff0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e045      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x444>
 8001b26:	e03d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e038      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d028      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d121      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cc      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b65      	ldr	r3, [pc, #404]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d044      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4934      	ldr	r1, [pc, #208]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f9a4 	bl	8000ff0 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f9a0 	bl	8000ff0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d20c      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490a      	ldr	r1, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f904 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08003704 	.word	0x08003704
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d84:	b094      	sub	sp, #80	; 0x50
 8001d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d90:	2300      	movs	r3, #0
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d98:	4b79      	ldr	r3, [pc, #484]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d00d      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f200 80e1 	bhi.w	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x3a>
 8001db2:	e0db      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001db8:	e0db      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dba:	4b73      	ldr	r3, [pc, #460]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dbe:	e0d8      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	2200      	movs	r2, #0
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8001de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
 8001dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001df2:	4622      	mov	r2, r4
 8001df4:	462b      	mov	r3, r5
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	0159      	lsls	r1, r3, #5
 8001e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e04:	0150      	lsls	r0, r2, #5
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	1a51      	subs	r1, r2, r1
 8001e0e:	6139      	str	r1, [r7, #16]
 8001e10:	4629      	mov	r1, r5
 8001e12:	eb63 0301 	sbc.w	r3, r3, r1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e24:	4659      	mov	r1, fp
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	4651      	mov	r1, sl
 8001e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2e:	4651      	mov	r1, sl
 8001e30:	018a      	lsls	r2, r1, #6
 8001e32:	4651      	mov	r1, sl
 8001e34:	ebb2 0801 	subs.w	r8, r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e52:	4690      	mov	r8, r2
 8001e54:	4699      	mov	r9, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	eb18 0303 	adds.w	r3, r8, r3
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	462b      	mov	r3, r5
 8001e60:	eb49 0303 	adc.w	r3, r9, r3
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e72:	4629      	mov	r1, r5
 8001e74:	024b      	lsls	r3, r1, #9
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	024a      	lsls	r2, r1, #9
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e86:	2200      	movs	r2, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e90:	f7fe fa06 	bl	80002a0 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e9c:	e058      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	099b      	lsrs	r3, r3, #6
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb8:	4642      	mov	r2, r8
 8001eba:	464b      	mov	r3, r9
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	0159      	lsls	r1, r3, #5
 8001ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eca:	0150      	lsls	r0, r2, #5
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	00eb      	lsls	r3, r5, #3
 8001f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f06:	00e2      	lsls	r2, r4, #3
 8001f08:	4614      	mov	r4, r2
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	18e3      	adds	r3, r4, r3
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	464b      	mov	r3, r9
 8001f14:	eb45 0303 	adc.w	r3, r5, r3
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f26:	4629      	mov	r1, r5
 8001f28:	028b      	lsls	r3, r1, #10
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f30:	4621      	mov	r1, r4
 8001f32:	028a      	lsls	r2, r1, #10
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	61fa      	str	r2, [r7, #28]
 8001f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f44:	f7fe f9ac 	bl	80002a0 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3750      	adds	r7, #80	; 0x50
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08003714 	.word	0x08003714

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffdc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0b5b      	lsrs	r3, r3, #13
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08003714 	.word	0x08003714

08001ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07b      	b.n	80020fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	2b00      	cmp	r3, #0
 800200c:	d108      	bne.n	8002020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002016:	d009      	beq.n	800202c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
 800201e:	e005      	b.n	800202c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fcfe 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	ea42 0103 	orr.w	r1, r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0104 	and.w	r1, r3, #4
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f003 0210 	and.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b08c      	sub	sp, #48	; 0x30
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002114:	2301      	movs	r3, #1
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_SPI_TransmitReceive+0x26>
 8002128:	2302      	movs	r3, #2
 800212a:	e18a      	b.n	8002442 <HAL_SPI_TransmitReceive+0x33c>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002134:	f7fe ff5c 	bl	8000ff0 <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800214e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002152:	2b01      	cmp	r3, #1
 8002154:	d00f      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x70>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215c:	d107      	bne.n	800216e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_SPI_TransmitReceive+0x68>
 8002166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800216a:	2b04      	cmp	r3, #4
 800216c:	d003      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002174:	e15b      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x82>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x82>
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800218e:	e14e      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b04      	cmp	r3, #4
 800219a:	d003      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2205      	movs	r2, #5
 80021a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d007      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002200:	d178      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x10a>
 800220a:	8b7b      	ldrh	r3, [r7, #26]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d166      	bne.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	1c9a      	adds	r2, r3, #2
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002234:	e053      	b.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d11b      	bne.n	800227c <HAL_SPI_TransmitReceive+0x176>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_SPI_TransmitReceive+0x176>
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d113      	bne.n	800227c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	1c9a      	adds	r2, r3, #2
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d119      	bne.n	80022be <HAL_SPI_TransmitReceive+0x1b8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d014      	beq.n	80022be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	b292      	uxth	r2, r2
 80022a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	1c9a      	adds	r2, r3, #2
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022ba:	2301      	movs	r3, #1
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022be:	f7fe fe97 	bl	8000ff0 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d807      	bhi.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d003      	beq.n	80022de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022dc:	e0a7      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1a6      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x130>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1a1      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x130>
 80022f2:	e07c      	b.n	80023ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x1fc>
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d16b      	bne.n	80023da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002328:	e057      	b.n	80023da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d11c      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x26c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d017      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x26c>
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d114      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d119      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x2ae>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d014      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023b4:	f7fe fe1c 	bl	8000ff0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d803      	bhi.n	80023cc <HAL_SPI_TransmitReceive+0x2c6>
 80023c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d102      	bne.n	80023d2 <HAL_SPI_TransmitReceive+0x2cc>
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023d8:	e029      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1a2      	bne.n	800232a <HAL_SPI_TransmitReceive+0x224>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d19d      	bne.n	800232a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f8b2 	bl	800255c <SPI_EndRxTxTransaction>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800240a:	e010      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	e000      	b.n	800242e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800242c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800243e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002442:	4618      	mov	r0, r3
 8002444:	3730      	adds	r7, #48	; 0x30
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800245c:	f7fe fdc8 	bl	8000ff0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800246c:	f7fe fdc0 	bl	8000ff0 <HAL_GetTick>
 8002470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	0d1b      	lsrs	r3, r3, #20
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002482:	e054      	b.n	800252e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d050      	beq.n	800252e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800248c:	f7fe fdb0 	bl	8000ff0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	d902      	bls.n	80024a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d13d      	bne.n	800251e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ba:	d111      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c4:	d004      	beq.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d107      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e8:	d10f      	bne.n	800250a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e017      	b.n	800254e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3b01      	subs	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d19b      	bne.n	8002484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <SPI_EndRxTxTransaction+0x7c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <SPI_EndRxTxTransaction+0x80>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0d5b      	lsrs	r3, r3, #21
 8002574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002586:	d112      	bne.n	80025ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff ff5a 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e00f      	b.n	80025ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d0f2      	beq.n	80025ae <SPI_EndRxTxTransaction+0x52>
 80025c8:	e000      	b.n	80025cc <SPI_EndRxTxTransaction+0x70>
        break;
 80025ca:	bf00      	nop
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000
 80025dc:	165e9f81 	.word	0x165e9f81

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e03f      	b.n	8002672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fa66 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f929 	bl	800287c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b08a      	sub	sp, #40	; 0x28
 800267e:	af02      	add	r7, sp, #8
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	d17c      	bne.n	8002794 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_UART_Transmit+0x2c>
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e075      	b.n	8002796 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_UART_Transmit+0x3e>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e06e      	b.n	8002796 <HAL_UART_Transmit+0x11c>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2221      	movs	r2, #33	; 0x21
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ce:	f7fe fc8f 	bl	8000ff0 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e8:	d108      	bne.n	80026fc <HAL_UART_Transmit+0x82>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e003      	b.n	8002704 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800270c:	e02a      	b.n	8002764 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2200      	movs	r2, #0
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f840 	bl	800279e <UART_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e036      	b.n	8002796 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800273c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	3302      	adds	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e007      	b.n	8002756 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1cf      	bne.n	800270e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2140      	movs	r1, #64	; 0x40
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f810 	bl	800279e <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e006      	b.n	8002796 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	e000      	b.n	8002796 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002794:	2302      	movs	r3, #2
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b090      	sub	sp, #64	; 0x40
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ae:	e050      	b.n	8002852 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d04c      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <UART_WaitOnFlagUntilTimeout+0x30>
 80027be:	f7fe fc17 	bl	8000ff0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d241      	bcs.n	8002852 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ee:	637a      	str	r2, [r7, #52]	; 0x34
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e5      	bne.n	80027ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3314      	adds	r3, #20
 8002808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	613b      	str	r3, [r7, #16]
   return(result);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002822:	623a      	str	r2, [r7, #32]
 8002824:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	69f9      	ldr	r1, [r7, #28]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e5      	bne.n	8002802 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e00f      	b.n	8002872 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4013      	ands	r3, r2
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	429a      	cmp	r2, r3
 800286e:	d09f      	beq.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3740      	adds	r7, #64	; 0x40
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b0c0      	sub	sp, #256	; 0x100
 8002882:	af00      	add	r7, sp, #0
 8002884:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	ea40 0301 	orr.w	r3, r0, r1
 80028a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028d4:	f021 010c 	bic.w	r1, r1, #12
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028e2:	430b      	orrs	r3, r1
 80028e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f6:	6999      	ldr	r1, [r3, #24]
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	ea40 0301 	orr.w	r3, r0, r1
 8002902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b8f      	ldr	r3, [pc, #572]	; (8002b48 <UART_SetConfig+0x2cc>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d005      	beq.n	800291c <UART_SetConfig+0xa0>
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b8d      	ldr	r3, [pc, #564]	; (8002b4c <UART_SetConfig+0x2d0>)
 8002918:	429a      	cmp	r2, r3
 800291a:	d104      	bne.n	8002926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800291c:	f7ff fb56 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8002920:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002924:	e003      	b.n	800292e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002926:	f7ff fb3d 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 800292a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002938:	f040 810c 	bne.w	8002b54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002940:	2200      	movs	r2, #0
 8002942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002946:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800294a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800294e:	4622      	mov	r2, r4
 8002950:	462b      	mov	r3, r5
 8002952:	1891      	adds	r1, r2, r2
 8002954:	65b9      	str	r1, [r7, #88]	; 0x58
 8002956:	415b      	adcs	r3, r3
 8002958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800295e:	4621      	mov	r1, r4
 8002960:	eb12 0801 	adds.w	r8, r2, r1
 8002964:	4629      	mov	r1, r5
 8002966:	eb43 0901 	adc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800298c:	462b      	mov	r3, r5
 800298e:	eb49 0303 	adc.w	r3, r9, r3
 8002992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029aa:	460b      	mov	r3, r1
 80029ac:	18db      	adds	r3, r3, r3
 80029ae:	653b      	str	r3, [r7, #80]	; 0x50
 80029b0:	4613      	mov	r3, r2
 80029b2:	eb42 0303 	adc.w	r3, r2, r3
 80029b6:	657b      	str	r3, [r7, #84]	; 0x54
 80029b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029c0:	f7fd fc6e 	bl	80002a0 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <UART_SetConfig+0x2d4>)
 80029ca:	fba3 2302 	umull	r2, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	011c      	lsls	r4, r3, #4
 80029d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	1891      	adds	r1, r2, r2
 80029ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80029ec:	415b      	adcs	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029f4:	4641      	mov	r1, r8
 80029f6:	eb12 0a01 	adds.w	sl, r2, r1
 80029fa:	4649      	mov	r1, r9
 80029fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a14:	4692      	mov	sl, r2
 8002a16:	469b      	mov	fp, r3
 8002a18:	4643      	mov	r3, r8
 8002a1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a22:	464b      	mov	r3, r9
 8002a24:	eb4b 0303 	adc.w	r3, fp, r3
 8002a28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a40:	460b      	mov	r3, r1
 8002a42:	18db      	adds	r3, r3, r3
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
 8002a46:	4613      	mov	r3, r2
 8002a48:	eb42 0303 	adc.w	r3, r2, r3
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a56:	f7fd fc23 	bl	80002a0 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002a62:	fba3 2301 	umull	r2, r3, r3, r1
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2264      	movs	r2, #100	; 0x64
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	1acb      	subs	r3, r1, r3
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002a78:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a84:	441c      	add	r4, r3
 8002a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a98:	4642      	mov	r2, r8
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	1891      	adds	r1, r2, r2
 8002a9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002aa0:	415b      	adcs	r3, r3
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	1851      	adds	r1, r2, r1
 8002aac:	6339      	str	r1, [r7, #48]	; 0x30
 8002aae:	4649      	mov	r1, r9
 8002ab0:	414b      	adcs	r3, r1
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ac0:	4659      	mov	r1, fp
 8002ac2:	00cb      	lsls	r3, r1, #3
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aca:	4651      	mov	r1, sl
 8002acc:	00ca      	lsls	r2, r1, #3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	189b      	adds	r3, r3, r2
 8002ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002adc:	464b      	mov	r3, r9
 8002ade:	460a      	mov	r2, r1
 8002ae0:	eb42 0303 	adc.w	r3, r2, r3
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002af4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002af8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b12:	f7fd fbc5 	bl	80002a0 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	2164      	movs	r1, #100	; 0x64
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	3332      	adds	r3, #50	; 0x32
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <UART_SetConfig+0x2d4>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	f003 0207 	and.w	r2, r3, #7
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4422      	add	r2, r4
 8002b42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b44:	e105      	b.n	8002d52 <UART_SetConfig+0x4d6>
 8002b46:	bf00      	nop
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	6239      	str	r1, [r7, #32]
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b76:	4641      	mov	r1, r8
 8002b78:	1854      	adds	r4, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb43 0501 	adc.w	r5, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	00eb      	lsls	r3, r5, #3
 8002b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8e:	00e2      	lsls	r2, r4, #3
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	18e3      	adds	r3, r4, r3
 8002b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	eb45 0303 	adc.w	r3, r5, r3
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	008b      	lsls	r3, r1, #2
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bcc:	4621      	mov	r1, r4
 8002bce:	008a      	lsls	r2, r1, #2
 8002bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bd4:	f7fd fb64 	bl	80002a0 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	011c      	lsls	r4, r3, #4
 8002be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	61b9      	str	r1, [r7, #24]
 8002c00:	415b      	adcs	r3, r3
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c08:	4641      	mov	r1, r8
 8002c0a:	1851      	adds	r1, r2, r1
 8002c0c:	6139      	str	r1, [r7, #16]
 8002c0e:	4649      	mov	r1, r9
 8002c10:	414b      	adcs	r3, r1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c20:	4659      	mov	r1, fp
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	4651      	mov	r1, sl
 8002c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2a:	4651      	mov	r1, sl
 8002c2c:	00ca      	lsls	r2, r1, #3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	4642      	mov	r2, r8
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	460a      	mov	r2, r1
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c60:	4649      	mov	r1, r9
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	4641      	mov	r1, r8
 8002c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	008a      	lsls	r2, r1, #2
 8002c6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c72:	f7fd fb15 	bl	80002a0 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	2164      	movs	r1, #100	; 0x64
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	3332      	adds	r3, #50	; 0x32
 8002c8e:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9a:	441c      	add	r4, r3
 8002c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ca4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ca6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002caa:	4642      	mov	r2, r8
 8002cac:	464b      	mov	r3, r9
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cba:	4641      	mov	r1, r8
 8002cbc:	1851      	adds	r1, r2, r1
 8002cbe:	6039      	str	r1, [r7, #0]
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	414b      	adcs	r3, r1
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cd2:	4659      	mov	r1, fp
 8002cd4:	00cb      	lsls	r3, r1, #3
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cdc:	4651      	mov	r1, sl
 8002cde:	00ca      	lsls	r2, r1, #3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4642      	mov	r2, r8
 8002ce8:	189b      	adds	r3, r3, r2
 8002cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cec:	464b      	mov	r3, r9
 8002cee:	460a      	mov	r2, r1
 8002cf0:	eb42 0303 	adc.w	r3, r2, r3
 8002cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8002d00:	667a      	str	r2, [r7, #100]	; 0x64
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d0e:	4649      	mov	r1, r9
 8002d10:	008b      	lsls	r3, r1, #2
 8002d12:	4641      	mov	r1, r8
 8002d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d18:	4641      	mov	r1, r8
 8002d1a:	008a      	lsls	r2, r1, #2
 8002d1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d20:	f7fd fabe 	bl	80002a0 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2164      	movs	r1, #100	; 0x64
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	3332      	adds	r3, #50	; 0x32
 8002d3c:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <UART_SetConfig+0x4e4>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4422      	add	r2, r4
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	bf00      	nop
 8002d54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5e:	bf00      	nop
 8002d60:	51eb851f 	.word	0x51eb851f

08002d64 <__errno>:
 8002d64:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <__errno+0x8>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	4d0d      	ldr	r5, [pc, #52]	; (8002da8 <__libc_init_array+0x38>)
 8002d74:	4c0d      	ldr	r4, [pc, #52]	; (8002dac <__libc_init_array+0x3c>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	4d0b      	ldr	r5, [pc, #44]	; (8002db0 <__libc_init_array+0x40>)
 8002d82:	4c0c      	ldr	r4, [pc, #48]	; (8002db4 <__libc_init_array+0x44>)
 8002d84:	f000 fc8e 	bl	80036a4 <_init>
 8002d88:	1b64      	subs	r4, r4, r5
 8002d8a:	10a4      	asrs	r4, r4, #2
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	08003758 	.word	0x08003758
 8002dac:	08003758 	.word	0x08003758
 8002db0:	08003758 	.word	0x08003758
 8002db4:	0800375c 	.word	0x0800375c

08002db8 <memset>:
 8002db8:	4402      	add	r2, r0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <memset+0xa>
 8002dc0:	4770      	bx	lr
 8002dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc6:	e7f9      	b.n	8002dbc <memset+0x4>

08002dc8 <siprintf>:
 8002dc8:	b40e      	push	{r1, r2, r3}
 8002dca:	b500      	push	{lr}
 8002dcc:	b09c      	sub	sp, #112	; 0x70
 8002dce:	ab1d      	add	r3, sp, #116	; 0x74
 8002dd0:	9002      	str	r0, [sp, #8]
 8002dd2:	9006      	str	r0, [sp, #24]
 8002dd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dd8:	4809      	ldr	r0, [pc, #36]	; (8002e00 <siprintf+0x38>)
 8002dda:	9107      	str	r1, [sp, #28]
 8002ddc:	9104      	str	r1, [sp, #16]
 8002dde:	4909      	ldr	r1, [pc, #36]	; (8002e04 <siprintf+0x3c>)
 8002de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002de4:	9105      	str	r1, [sp, #20]
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	a902      	add	r1, sp, #8
 8002dec:	f000 f868 	bl	8002ec0 <_svfiprintf_r>
 8002df0:	9b02      	ldr	r3, [sp, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	b01c      	add	sp, #112	; 0x70
 8002df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dfc:	b003      	add	sp, #12
 8002dfe:	4770      	bx	lr
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	ffff0208 	.word	0xffff0208

08002e08 <__ssputs_r>:
 8002e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0c:	688e      	ldr	r6, [r1, #8]
 8002e0e:	429e      	cmp	r6, r3
 8002e10:	4682      	mov	sl, r0
 8002e12:	460c      	mov	r4, r1
 8002e14:	4690      	mov	r8, r2
 8002e16:	461f      	mov	r7, r3
 8002e18:	d838      	bhi.n	8002e8c <__ssputs_r+0x84>
 8002e1a:	898a      	ldrh	r2, [r1, #12]
 8002e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e20:	d032      	beq.n	8002e88 <__ssputs_r+0x80>
 8002e22:	6825      	ldr	r5, [r4, #0]
 8002e24:	6909      	ldr	r1, [r1, #16]
 8002e26:	eba5 0901 	sub.w	r9, r5, r1
 8002e2a:	6965      	ldr	r5, [r4, #20]
 8002e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e34:	3301      	adds	r3, #1
 8002e36:	444b      	add	r3, r9
 8002e38:	106d      	asrs	r5, r5, #1
 8002e3a:	429d      	cmp	r5, r3
 8002e3c:	bf38      	it	cc
 8002e3e:	461d      	movcc	r5, r3
 8002e40:	0553      	lsls	r3, r2, #21
 8002e42:	d531      	bpl.n	8002ea8 <__ssputs_r+0xa0>
 8002e44:	4629      	mov	r1, r5
 8002e46:	f000 fb63 	bl	8003510 <_malloc_r>
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	b950      	cbnz	r0, 8002e64 <__ssputs_r+0x5c>
 8002e4e:	230c      	movs	r3, #12
 8002e50:	f8ca 3000 	str.w	r3, [sl]
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e64:	6921      	ldr	r1, [r4, #16]
 8002e66:	464a      	mov	r2, r9
 8002e68:	f000 fabe 	bl	80033e8 <memcpy>
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	6126      	str	r6, [r4, #16]
 8002e7a:	6165      	str	r5, [r4, #20]
 8002e7c:	444e      	add	r6, r9
 8002e7e:	eba5 0509 	sub.w	r5, r5, r9
 8002e82:	6026      	str	r6, [r4, #0]
 8002e84:	60a5      	str	r5, [r4, #8]
 8002e86:	463e      	mov	r6, r7
 8002e88:	42be      	cmp	r6, r7
 8002e8a:	d900      	bls.n	8002e8e <__ssputs_r+0x86>
 8002e8c:	463e      	mov	r6, r7
 8002e8e:	6820      	ldr	r0, [r4, #0]
 8002e90:	4632      	mov	r2, r6
 8002e92:	4641      	mov	r1, r8
 8002e94:	f000 fab6 	bl	8003404 <memmove>
 8002e98:	68a3      	ldr	r3, [r4, #8]
 8002e9a:	1b9b      	subs	r3, r3, r6
 8002e9c:	60a3      	str	r3, [r4, #8]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	4433      	add	r3, r6
 8002ea2:	6023      	str	r3, [r4, #0]
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e7db      	b.n	8002e60 <__ssputs_r+0x58>
 8002ea8:	462a      	mov	r2, r5
 8002eaa:	f000 fba5 	bl	80035f8 <_realloc_r>
 8002eae:	4606      	mov	r6, r0
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d1e1      	bne.n	8002e78 <__ssputs_r+0x70>
 8002eb4:	6921      	ldr	r1, [r4, #16]
 8002eb6:	4650      	mov	r0, sl
 8002eb8:	f000 fabe 	bl	8003438 <_free_r>
 8002ebc:	e7c7      	b.n	8002e4e <__ssputs_r+0x46>
	...

08002ec0 <_svfiprintf_r>:
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec4:	4698      	mov	r8, r3
 8002ec6:	898b      	ldrh	r3, [r1, #12]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	b09d      	sub	sp, #116	; 0x74
 8002ecc:	4607      	mov	r7, r0
 8002ece:	460d      	mov	r5, r1
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	d50e      	bpl.n	8002ef2 <_svfiprintf_r+0x32>
 8002ed4:	690b      	ldr	r3, [r1, #16]
 8002ed6:	b963      	cbnz	r3, 8002ef2 <_svfiprintf_r+0x32>
 8002ed8:	2140      	movs	r1, #64	; 0x40
 8002eda:	f000 fb19 	bl	8003510 <_malloc_r>
 8002ede:	6028      	str	r0, [r5, #0]
 8002ee0:	6128      	str	r0, [r5, #16]
 8002ee2:	b920      	cbnz	r0, 8002eee <_svfiprintf_r+0x2e>
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	e0d1      	b.n	8003092 <_svfiprintf_r+0x1d2>
 8002eee:	2340      	movs	r3, #64	; 0x40
 8002ef0:	616b      	str	r3, [r5, #20]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f00:	2330      	movs	r3, #48	; 0x30
 8002f02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80030ac <_svfiprintf_r+0x1ec>
 8002f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f0a:	f04f 0901 	mov.w	r9, #1
 8002f0e:	4623      	mov	r3, r4
 8002f10:	469a      	mov	sl, r3
 8002f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f16:	b10a      	cbz	r2, 8002f1c <_svfiprintf_r+0x5c>
 8002f18:	2a25      	cmp	r2, #37	; 0x25
 8002f1a:	d1f9      	bne.n	8002f10 <_svfiprintf_r+0x50>
 8002f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8002f20:	d00b      	beq.n	8002f3a <_svfiprintf_r+0x7a>
 8002f22:	465b      	mov	r3, fp
 8002f24:	4622      	mov	r2, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	4638      	mov	r0, r7
 8002f2a:	f7ff ff6d 	bl	8002e08 <__ssputs_r>
 8002f2e:	3001      	adds	r0, #1
 8002f30:	f000 80aa 	beq.w	8003088 <_svfiprintf_r+0x1c8>
 8002f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f36:	445a      	add	r2, fp
 8002f38:	9209      	str	r2, [sp, #36]	; 0x24
 8002f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80a2 	beq.w	8003088 <_svfiprintf_r+0x1c8>
 8002f44:	2300      	movs	r3, #0
 8002f46:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f4e:	f10a 0a01 	add.w	sl, sl, #1
 8002f52:	9304      	str	r3, [sp, #16]
 8002f54:	9307      	str	r3, [sp, #28]
 8002f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f5c:	4654      	mov	r4, sl
 8002f5e:	2205      	movs	r2, #5
 8002f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f64:	4851      	ldr	r0, [pc, #324]	; (80030ac <_svfiprintf_r+0x1ec>)
 8002f66:	f7fd f94b 	bl	8000200 <memchr>
 8002f6a:	9a04      	ldr	r2, [sp, #16]
 8002f6c:	b9d8      	cbnz	r0, 8002fa6 <_svfiprintf_r+0xe6>
 8002f6e:	06d0      	lsls	r0, r2, #27
 8002f70:	bf44      	itt	mi
 8002f72:	2320      	movmi	r3, #32
 8002f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f78:	0711      	lsls	r1, r2, #28
 8002f7a:	bf44      	itt	mi
 8002f7c:	232b      	movmi	r3, #43	; 0x2b
 8002f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f82:	f89a 3000 	ldrb.w	r3, [sl]
 8002f86:	2b2a      	cmp	r3, #42	; 0x2a
 8002f88:	d015      	beq.n	8002fb6 <_svfiprintf_r+0xf6>
 8002f8a:	9a07      	ldr	r2, [sp, #28]
 8002f8c:	4654      	mov	r4, sl
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f04f 0c0a 	mov.w	ip, #10
 8002f94:	4621      	mov	r1, r4
 8002f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f9a:	3b30      	subs	r3, #48	; 0x30
 8002f9c:	2b09      	cmp	r3, #9
 8002f9e:	d94e      	bls.n	800303e <_svfiprintf_r+0x17e>
 8002fa0:	b1b0      	cbz	r0, 8002fd0 <_svfiprintf_r+0x110>
 8002fa2:	9207      	str	r2, [sp, #28]
 8002fa4:	e014      	b.n	8002fd0 <_svfiprintf_r+0x110>
 8002fa6:	eba0 0308 	sub.w	r3, r0, r8
 8002faa:	fa09 f303 	lsl.w	r3, r9, r3
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	9304      	str	r3, [sp, #16]
 8002fb2:	46a2      	mov	sl, r4
 8002fb4:	e7d2      	b.n	8002f5c <_svfiprintf_r+0x9c>
 8002fb6:	9b03      	ldr	r3, [sp, #12]
 8002fb8:	1d19      	adds	r1, r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	9103      	str	r1, [sp, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bfbb      	ittet	lt
 8002fc2:	425b      	neglt	r3, r3
 8002fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8002fc8:	9307      	strge	r3, [sp, #28]
 8002fca:	9307      	strlt	r3, [sp, #28]
 8002fcc:	bfb8      	it	lt
 8002fce:	9204      	strlt	r2, [sp, #16]
 8002fd0:	7823      	ldrb	r3, [r4, #0]
 8002fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8002fd4:	d10c      	bne.n	8002ff0 <_svfiprintf_r+0x130>
 8002fd6:	7863      	ldrb	r3, [r4, #1]
 8002fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002fda:	d135      	bne.n	8003048 <_svfiprintf_r+0x188>
 8002fdc:	9b03      	ldr	r3, [sp, #12]
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	9203      	str	r2, [sp, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bfb8      	it	lt
 8002fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fec:	3402      	adds	r4, #2
 8002fee:	9305      	str	r3, [sp, #20]
 8002ff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030bc <_svfiprintf_r+0x1fc>
 8002ff4:	7821      	ldrb	r1, [r4, #0]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	4650      	mov	r0, sl
 8002ffa:	f7fd f901 	bl	8000200 <memchr>
 8002ffe:	b140      	cbz	r0, 8003012 <_svfiprintf_r+0x152>
 8003000:	2340      	movs	r3, #64	; 0x40
 8003002:	eba0 000a 	sub.w	r0, r0, sl
 8003006:	fa03 f000 	lsl.w	r0, r3, r0
 800300a:	9b04      	ldr	r3, [sp, #16]
 800300c:	4303      	orrs	r3, r0
 800300e:	3401      	adds	r4, #1
 8003010:	9304      	str	r3, [sp, #16]
 8003012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003016:	4826      	ldr	r0, [pc, #152]	; (80030b0 <_svfiprintf_r+0x1f0>)
 8003018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800301c:	2206      	movs	r2, #6
 800301e:	f7fd f8ef 	bl	8000200 <memchr>
 8003022:	2800      	cmp	r0, #0
 8003024:	d038      	beq.n	8003098 <_svfiprintf_r+0x1d8>
 8003026:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <_svfiprintf_r+0x1f4>)
 8003028:	bb1b      	cbnz	r3, 8003072 <_svfiprintf_r+0x1b2>
 800302a:	9b03      	ldr	r3, [sp, #12]
 800302c:	3307      	adds	r3, #7
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	3308      	adds	r3, #8
 8003034:	9303      	str	r3, [sp, #12]
 8003036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003038:	4433      	add	r3, r6
 800303a:	9309      	str	r3, [sp, #36]	; 0x24
 800303c:	e767      	b.n	8002f0e <_svfiprintf_r+0x4e>
 800303e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003042:	460c      	mov	r4, r1
 8003044:	2001      	movs	r0, #1
 8003046:	e7a5      	b.n	8002f94 <_svfiprintf_r+0xd4>
 8003048:	2300      	movs	r3, #0
 800304a:	3401      	adds	r4, #1
 800304c:	9305      	str	r3, [sp, #20]
 800304e:	4619      	mov	r1, r3
 8003050:	f04f 0c0a 	mov.w	ip, #10
 8003054:	4620      	mov	r0, r4
 8003056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800305a:	3a30      	subs	r2, #48	; 0x30
 800305c:	2a09      	cmp	r2, #9
 800305e:	d903      	bls.n	8003068 <_svfiprintf_r+0x1a8>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0c5      	beq.n	8002ff0 <_svfiprintf_r+0x130>
 8003064:	9105      	str	r1, [sp, #20]
 8003066:	e7c3      	b.n	8002ff0 <_svfiprintf_r+0x130>
 8003068:	fb0c 2101 	mla	r1, ip, r1, r2
 800306c:	4604      	mov	r4, r0
 800306e:	2301      	movs	r3, #1
 8003070:	e7f0      	b.n	8003054 <_svfiprintf_r+0x194>
 8003072:	ab03      	add	r3, sp, #12
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	462a      	mov	r2, r5
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <_svfiprintf_r+0x1f8>)
 800307a:	a904      	add	r1, sp, #16
 800307c:	4638      	mov	r0, r7
 800307e:	f3af 8000 	nop.w
 8003082:	1c42      	adds	r2, r0, #1
 8003084:	4606      	mov	r6, r0
 8003086:	d1d6      	bne.n	8003036 <_svfiprintf_r+0x176>
 8003088:	89ab      	ldrh	r3, [r5, #12]
 800308a:	065b      	lsls	r3, r3, #25
 800308c:	f53f af2c 	bmi.w	8002ee8 <_svfiprintf_r+0x28>
 8003090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003092:	b01d      	add	sp, #116	; 0x74
 8003094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003098:	ab03      	add	r3, sp, #12
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	462a      	mov	r2, r5
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <_svfiprintf_r+0x1f8>)
 80030a0:	a904      	add	r1, sp, #16
 80030a2:	4638      	mov	r0, r7
 80030a4:	f000 f87a 	bl	800319c <_printf_i>
 80030a8:	e7eb      	b.n	8003082 <_svfiprintf_r+0x1c2>
 80030aa:	bf00      	nop
 80030ac:	0800371c 	.word	0x0800371c
 80030b0:	08003726 	.word	0x08003726
 80030b4:	00000000 	.word	0x00000000
 80030b8:	08002e09 	.word	0x08002e09
 80030bc:	08003722 	.word	0x08003722

080030c0 <_printf_common>:
 80030c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030c4:	4616      	mov	r6, r2
 80030c6:	4699      	mov	r9, r3
 80030c8:	688a      	ldr	r2, [r1, #8]
 80030ca:	690b      	ldr	r3, [r1, #16]
 80030cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	bfb8      	it	lt
 80030d4:	4613      	movlt	r3, r2
 80030d6:	6033      	str	r3, [r6, #0]
 80030d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030dc:	4607      	mov	r7, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	b10a      	cbz	r2, 80030e6 <_printf_common+0x26>
 80030e2:	3301      	adds	r3, #1
 80030e4:	6033      	str	r3, [r6, #0]
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	0699      	lsls	r1, r3, #26
 80030ea:	bf42      	ittt	mi
 80030ec:	6833      	ldrmi	r3, [r6, #0]
 80030ee:	3302      	addmi	r3, #2
 80030f0:	6033      	strmi	r3, [r6, #0]
 80030f2:	6825      	ldr	r5, [r4, #0]
 80030f4:	f015 0506 	ands.w	r5, r5, #6
 80030f8:	d106      	bne.n	8003108 <_printf_common+0x48>
 80030fa:	f104 0a19 	add.w	sl, r4, #25
 80030fe:	68e3      	ldr	r3, [r4, #12]
 8003100:	6832      	ldr	r2, [r6, #0]
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	42ab      	cmp	r3, r5
 8003106:	dc26      	bgt.n	8003156 <_printf_common+0x96>
 8003108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800310c:	1e13      	subs	r3, r2, #0
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	bf18      	it	ne
 8003112:	2301      	movne	r3, #1
 8003114:	0692      	lsls	r2, r2, #26
 8003116:	d42b      	bmi.n	8003170 <_printf_common+0xb0>
 8003118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800311c:	4649      	mov	r1, r9
 800311e:	4638      	mov	r0, r7
 8003120:	47c0      	blx	r8
 8003122:	3001      	adds	r0, #1
 8003124:	d01e      	beq.n	8003164 <_printf_common+0xa4>
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	68e5      	ldr	r5, [r4, #12]
 800312a:	6832      	ldr	r2, [r6, #0]
 800312c:	f003 0306 	and.w	r3, r3, #6
 8003130:	2b04      	cmp	r3, #4
 8003132:	bf08      	it	eq
 8003134:	1aad      	subeq	r5, r5, r2
 8003136:	68a3      	ldr	r3, [r4, #8]
 8003138:	6922      	ldr	r2, [r4, #16]
 800313a:	bf0c      	ite	eq
 800313c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003140:	2500      	movne	r5, #0
 8003142:	4293      	cmp	r3, r2
 8003144:	bfc4      	itt	gt
 8003146:	1a9b      	subgt	r3, r3, r2
 8003148:	18ed      	addgt	r5, r5, r3
 800314a:	2600      	movs	r6, #0
 800314c:	341a      	adds	r4, #26
 800314e:	42b5      	cmp	r5, r6
 8003150:	d11a      	bne.n	8003188 <_printf_common+0xc8>
 8003152:	2000      	movs	r0, #0
 8003154:	e008      	b.n	8003168 <_printf_common+0xa8>
 8003156:	2301      	movs	r3, #1
 8003158:	4652      	mov	r2, sl
 800315a:	4649      	mov	r1, r9
 800315c:	4638      	mov	r0, r7
 800315e:	47c0      	blx	r8
 8003160:	3001      	adds	r0, #1
 8003162:	d103      	bne.n	800316c <_printf_common+0xac>
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316c:	3501      	adds	r5, #1
 800316e:	e7c6      	b.n	80030fe <_printf_common+0x3e>
 8003170:	18e1      	adds	r1, r4, r3
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	2030      	movs	r0, #48	; 0x30
 8003176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800317a:	4422      	add	r2, r4
 800317c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003184:	3302      	adds	r3, #2
 8003186:	e7c7      	b.n	8003118 <_printf_common+0x58>
 8003188:	2301      	movs	r3, #1
 800318a:	4622      	mov	r2, r4
 800318c:	4649      	mov	r1, r9
 800318e:	4638      	mov	r0, r7
 8003190:	47c0      	blx	r8
 8003192:	3001      	adds	r0, #1
 8003194:	d0e6      	beq.n	8003164 <_printf_common+0xa4>
 8003196:	3601      	adds	r6, #1
 8003198:	e7d9      	b.n	800314e <_printf_common+0x8e>
	...

0800319c <_printf_i>:
 800319c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031a0:	7e0f      	ldrb	r7, [r1, #24]
 80031a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031a4:	2f78      	cmp	r7, #120	; 0x78
 80031a6:	4691      	mov	r9, r2
 80031a8:	4680      	mov	r8, r0
 80031aa:	460c      	mov	r4, r1
 80031ac:	469a      	mov	sl, r3
 80031ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031b2:	d807      	bhi.n	80031c4 <_printf_i+0x28>
 80031b4:	2f62      	cmp	r7, #98	; 0x62
 80031b6:	d80a      	bhi.n	80031ce <_printf_i+0x32>
 80031b8:	2f00      	cmp	r7, #0
 80031ba:	f000 80d8 	beq.w	800336e <_printf_i+0x1d2>
 80031be:	2f58      	cmp	r7, #88	; 0x58
 80031c0:	f000 80a3 	beq.w	800330a <_printf_i+0x16e>
 80031c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031cc:	e03a      	b.n	8003244 <_printf_i+0xa8>
 80031ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031d2:	2b15      	cmp	r3, #21
 80031d4:	d8f6      	bhi.n	80031c4 <_printf_i+0x28>
 80031d6:	a101      	add	r1, pc, #4	; (adr r1, 80031dc <_printf_i+0x40>)
 80031d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031dc:	08003235 	.word	0x08003235
 80031e0:	08003249 	.word	0x08003249
 80031e4:	080031c5 	.word	0x080031c5
 80031e8:	080031c5 	.word	0x080031c5
 80031ec:	080031c5 	.word	0x080031c5
 80031f0:	080031c5 	.word	0x080031c5
 80031f4:	08003249 	.word	0x08003249
 80031f8:	080031c5 	.word	0x080031c5
 80031fc:	080031c5 	.word	0x080031c5
 8003200:	080031c5 	.word	0x080031c5
 8003204:	080031c5 	.word	0x080031c5
 8003208:	08003355 	.word	0x08003355
 800320c:	08003279 	.word	0x08003279
 8003210:	08003337 	.word	0x08003337
 8003214:	080031c5 	.word	0x080031c5
 8003218:	080031c5 	.word	0x080031c5
 800321c:	08003377 	.word	0x08003377
 8003220:	080031c5 	.word	0x080031c5
 8003224:	08003279 	.word	0x08003279
 8003228:	080031c5 	.word	0x080031c5
 800322c:	080031c5 	.word	0x080031c5
 8003230:	0800333f 	.word	0x0800333f
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	1d1a      	adds	r2, r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	602a      	str	r2, [r5, #0]
 800323c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003244:	2301      	movs	r3, #1
 8003246:	e0a3      	b.n	8003390 <_printf_i+0x1f4>
 8003248:	6820      	ldr	r0, [r4, #0]
 800324a:	6829      	ldr	r1, [r5, #0]
 800324c:	0606      	lsls	r6, r0, #24
 800324e:	f101 0304 	add.w	r3, r1, #4
 8003252:	d50a      	bpl.n	800326a <_printf_i+0xce>
 8003254:	680e      	ldr	r6, [r1, #0]
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	2e00      	cmp	r6, #0
 800325a:	da03      	bge.n	8003264 <_printf_i+0xc8>
 800325c:	232d      	movs	r3, #45	; 0x2d
 800325e:	4276      	negs	r6, r6
 8003260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003264:	485e      	ldr	r0, [pc, #376]	; (80033e0 <_printf_i+0x244>)
 8003266:	230a      	movs	r3, #10
 8003268:	e019      	b.n	800329e <_printf_i+0x102>
 800326a:	680e      	ldr	r6, [r1, #0]
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003272:	bf18      	it	ne
 8003274:	b236      	sxthne	r6, r6
 8003276:	e7ef      	b.n	8003258 <_printf_i+0xbc>
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	1d19      	adds	r1, r3, #4
 800327e:	6029      	str	r1, [r5, #0]
 8003280:	0601      	lsls	r1, r0, #24
 8003282:	d501      	bpl.n	8003288 <_printf_i+0xec>
 8003284:	681e      	ldr	r6, [r3, #0]
 8003286:	e002      	b.n	800328e <_printf_i+0xf2>
 8003288:	0646      	lsls	r6, r0, #25
 800328a:	d5fb      	bpl.n	8003284 <_printf_i+0xe8>
 800328c:	881e      	ldrh	r6, [r3, #0]
 800328e:	4854      	ldr	r0, [pc, #336]	; (80033e0 <_printf_i+0x244>)
 8003290:	2f6f      	cmp	r7, #111	; 0x6f
 8003292:	bf0c      	ite	eq
 8003294:	2308      	moveq	r3, #8
 8003296:	230a      	movne	r3, #10
 8003298:	2100      	movs	r1, #0
 800329a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800329e:	6865      	ldr	r5, [r4, #4]
 80032a0:	60a5      	str	r5, [r4, #8]
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	bfa2      	ittt	ge
 80032a6:	6821      	ldrge	r1, [r4, #0]
 80032a8:	f021 0104 	bicge.w	r1, r1, #4
 80032ac:	6021      	strge	r1, [r4, #0]
 80032ae:	b90e      	cbnz	r6, 80032b4 <_printf_i+0x118>
 80032b0:	2d00      	cmp	r5, #0
 80032b2:	d04d      	beq.n	8003350 <_printf_i+0x1b4>
 80032b4:	4615      	mov	r5, r2
 80032b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80032ba:	fb03 6711 	mls	r7, r3, r1, r6
 80032be:	5dc7      	ldrb	r7, [r0, r7]
 80032c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032c4:	4637      	mov	r7, r6
 80032c6:	42bb      	cmp	r3, r7
 80032c8:	460e      	mov	r6, r1
 80032ca:	d9f4      	bls.n	80032b6 <_printf_i+0x11a>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d10b      	bne.n	80032e8 <_printf_i+0x14c>
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	07de      	lsls	r6, r3, #31
 80032d4:	d508      	bpl.n	80032e8 <_printf_i+0x14c>
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	6861      	ldr	r1, [r4, #4]
 80032da:	4299      	cmp	r1, r3
 80032dc:	bfde      	ittt	le
 80032de:	2330      	movle	r3, #48	; 0x30
 80032e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032e8:	1b52      	subs	r2, r2, r5
 80032ea:	6122      	str	r2, [r4, #16]
 80032ec:	f8cd a000 	str.w	sl, [sp]
 80032f0:	464b      	mov	r3, r9
 80032f2:	aa03      	add	r2, sp, #12
 80032f4:	4621      	mov	r1, r4
 80032f6:	4640      	mov	r0, r8
 80032f8:	f7ff fee2 	bl	80030c0 <_printf_common>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d14c      	bne.n	800339a <_printf_i+0x1fe>
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	b004      	add	sp, #16
 8003306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330a:	4835      	ldr	r0, [pc, #212]	; (80033e0 <_printf_i+0x244>)
 800330c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003310:	6829      	ldr	r1, [r5, #0]
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	f851 6b04 	ldr.w	r6, [r1], #4
 8003318:	6029      	str	r1, [r5, #0]
 800331a:	061d      	lsls	r5, r3, #24
 800331c:	d514      	bpl.n	8003348 <_printf_i+0x1ac>
 800331e:	07df      	lsls	r7, r3, #31
 8003320:	bf44      	itt	mi
 8003322:	f043 0320 	orrmi.w	r3, r3, #32
 8003326:	6023      	strmi	r3, [r4, #0]
 8003328:	b91e      	cbnz	r6, 8003332 <_printf_i+0x196>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	f023 0320 	bic.w	r3, r3, #32
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	2310      	movs	r3, #16
 8003334:	e7b0      	b.n	8003298 <_printf_i+0xfc>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	f043 0320 	orr.w	r3, r3, #32
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	2378      	movs	r3, #120	; 0x78
 8003340:	4828      	ldr	r0, [pc, #160]	; (80033e4 <_printf_i+0x248>)
 8003342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003346:	e7e3      	b.n	8003310 <_printf_i+0x174>
 8003348:	0659      	lsls	r1, r3, #25
 800334a:	bf48      	it	mi
 800334c:	b2b6      	uxthmi	r6, r6
 800334e:	e7e6      	b.n	800331e <_printf_i+0x182>
 8003350:	4615      	mov	r5, r2
 8003352:	e7bb      	b.n	80032cc <_printf_i+0x130>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	6826      	ldr	r6, [r4, #0]
 8003358:	6961      	ldr	r1, [r4, #20]
 800335a:	1d18      	adds	r0, r3, #4
 800335c:	6028      	str	r0, [r5, #0]
 800335e:	0635      	lsls	r5, r6, #24
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	d501      	bpl.n	8003368 <_printf_i+0x1cc>
 8003364:	6019      	str	r1, [r3, #0]
 8003366:	e002      	b.n	800336e <_printf_i+0x1d2>
 8003368:	0670      	lsls	r0, r6, #25
 800336a:	d5fb      	bpl.n	8003364 <_printf_i+0x1c8>
 800336c:	8019      	strh	r1, [r3, #0]
 800336e:	2300      	movs	r3, #0
 8003370:	6123      	str	r3, [r4, #16]
 8003372:	4615      	mov	r5, r2
 8003374:	e7ba      	b.n	80032ec <_printf_i+0x150>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	1d1a      	adds	r2, r3, #4
 800337a:	602a      	str	r2, [r5, #0]
 800337c:	681d      	ldr	r5, [r3, #0]
 800337e:	6862      	ldr	r2, [r4, #4]
 8003380:	2100      	movs	r1, #0
 8003382:	4628      	mov	r0, r5
 8003384:	f7fc ff3c 	bl	8000200 <memchr>
 8003388:	b108      	cbz	r0, 800338e <_printf_i+0x1f2>
 800338a:	1b40      	subs	r0, r0, r5
 800338c:	6060      	str	r0, [r4, #4]
 800338e:	6863      	ldr	r3, [r4, #4]
 8003390:	6123      	str	r3, [r4, #16]
 8003392:	2300      	movs	r3, #0
 8003394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003398:	e7a8      	b.n	80032ec <_printf_i+0x150>
 800339a:	6923      	ldr	r3, [r4, #16]
 800339c:	462a      	mov	r2, r5
 800339e:	4649      	mov	r1, r9
 80033a0:	4640      	mov	r0, r8
 80033a2:	47d0      	blx	sl
 80033a4:	3001      	adds	r0, #1
 80033a6:	d0ab      	beq.n	8003300 <_printf_i+0x164>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	079b      	lsls	r3, r3, #30
 80033ac:	d413      	bmi.n	80033d6 <_printf_i+0x23a>
 80033ae:	68e0      	ldr	r0, [r4, #12]
 80033b0:	9b03      	ldr	r3, [sp, #12]
 80033b2:	4298      	cmp	r0, r3
 80033b4:	bfb8      	it	lt
 80033b6:	4618      	movlt	r0, r3
 80033b8:	e7a4      	b.n	8003304 <_printf_i+0x168>
 80033ba:	2301      	movs	r3, #1
 80033bc:	4632      	mov	r2, r6
 80033be:	4649      	mov	r1, r9
 80033c0:	4640      	mov	r0, r8
 80033c2:	47d0      	blx	sl
 80033c4:	3001      	adds	r0, #1
 80033c6:	d09b      	beq.n	8003300 <_printf_i+0x164>
 80033c8:	3501      	adds	r5, #1
 80033ca:	68e3      	ldr	r3, [r4, #12]
 80033cc:	9903      	ldr	r1, [sp, #12]
 80033ce:	1a5b      	subs	r3, r3, r1
 80033d0:	42ab      	cmp	r3, r5
 80033d2:	dcf2      	bgt.n	80033ba <_printf_i+0x21e>
 80033d4:	e7eb      	b.n	80033ae <_printf_i+0x212>
 80033d6:	2500      	movs	r5, #0
 80033d8:	f104 0619 	add.w	r6, r4, #25
 80033dc:	e7f5      	b.n	80033ca <_printf_i+0x22e>
 80033de:	bf00      	nop
 80033e0:	0800372d 	.word	0x0800372d
 80033e4:	0800373e 	.word	0x0800373e

080033e8 <memcpy>:
 80033e8:	440a      	add	r2, r1
 80033ea:	4291      	cmp	r1, r2
 80033ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80033f0:	d100      	bne.n	80033f4 <memcpy+0xc>
 80033f2:	4770      	bx	lr
 80033f4:	b510      	push	{r4, lr}
 80033f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033fe:	4291      	cmp	r1, r2
 8003400:	d1f9      	bne.n	80033f6 <memcpy+0xe>
 8003402:	bd10      	pop	{r4, pc}

08003404 <memmove>:
 8003404:	4288      	cmp	r0, r1
 8003406:	b510      	push	{r4, lr}
 8003408:	eb01 0402 	add.w	r4, r1, r2
 800340c:	d902      	bls.n	8003414 <memmove+0x10>
 800340e:	4284      	cmp	r4, r0
 8003410:	4623      	mov	r3, r4
 8003412:	d807      	bhi.n	8003424 <memmove+0x20>
 8003414:	1e43      	subs	r3, r0, #1
 8003416:	42a1      	cmp	r1, r4
 8003418:	d008      	beq.n	800342c <memmove+0x28>
 800341a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800341e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003422:	e7f8      	b.n	8003416 <memmove+0x12>
 8003424:	4402      	add	r2, r0
 8003426:	4601      	mov	r1, r0
 8003428:	428a      	cmp	r2, r1
 800342a:	d100      	bne.n	800342e <memmove+0x2a>
 800342c:	bd10      	pop	{r4, pc}
 800342e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003436:	e7f7      	b.n	8003428 <memmove+0x24>

08003438 <_free_r>:
 8003438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800343a:	2900      	cmp	r1, #0
 800343c:	d044      	beq.n	80034c8 <_free_r+0x90>
 800343e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003442:	9001      	str	r0, [sp, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f1a1 0404 	sub.w	r4, r1, #4
 800344a:	bfb8      	it	lt
 800344c:	18e4      	addlt	r4, r4, r3
 800344e:	f000 f913 	bl	8003678 <__malloc_lock>
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <_free_r+0x94>)
 8003454:	9801      	ldr	r0, [sp, #4]
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	b933      	cbnz	r3, 8003468 <_free_r+0x30>
 800345a:	6063      	str	r3, [r4, #4]
 800345c:	6014      	str	r4, [r2, #0]
 800345e:	b003      	add	sp, #12
 8003460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003464:	f000 b90e 	b.w	8003684 <__malloc_unlock>
 8003468:	42a3      	cmp	r3, r4
 800346a:	d908      	bls.n	800347e <_free_r+0x46>
 800346c:	6825      	ldr	r5, [r4, #0]
 800346e:	1961      	adds	r1, r4, r5
 8003470:	428b      	cmp	r3, r1
 8003472:	bf01      	itttt	eq
 8003474:	6819      	ldreq	r1, [r3, #0]
 8003476:	685b      	ldreq	r3, [r3, #4]
 8003478:	1949      	addeq	r1, r1, r5
 800347a:	6021      	streq	r1, [r4, #0]
 800347c:	e7ed      	b.n	800345a <_free_r+0x22>
 800347e:	461a      	mov	r2, r3
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	b10b      	cbz	r3, 8003488 <_free_r+0x50>
 8003484:	42a3      	cmp	r3, r4
 8003486:	d9fa      	bls.n	800347e <_free_r+0x46>
 8003488:	6811      	ldr	r1, [r2, #0]
 800348a:	1855      	adds	r5, r2, r1
 800348c:	42a5      	cmp	r5, r4
 800348e:	d10b      	bne.n	80034a8 <_free_r+0x70>
 8003490:	6824      	ldr	r4, [r4, #0]
 8003492:	4421      	add	r1, r4
 8003494:	1854      	adds	r4, r2, r1
 8003496:	42a3      	cmp	r3, r4
 8003498:	6011      	str	r1, [r2, #0]
 800349a:	d1e0      	bne.n	800345e <_free_r+0x26>
 800349c:	681c      	ldr	r4, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	6053      	str	r3, [r2, #4]
 80034a2:	4421      	add	r1, r4
 80034a4:	6011      	str	r1, [r2, #0]
 80034a6:	e7da      	b.n	800345e <_free_r+0x26>
 80034a8:	d902      	bls.n	80034b0 <_free_r+0x78>
 80034aa:	230c      	movs	r3, #12
 80034ac:	6003      	str	r3, [r0, #0]
 80034ae:	e7d6      	b.n	800345e <_free_r+0x26>
 80034b0:	6825      	ldr	r5, [r4, #0]
 80034b2:	1961      	adds	r1, r4, r5
 80034b4:	428b      	cmp	r3, r1
 80034b6:	bf04      	itt	eq
 80034b8:	6819      	ldreq	r1, [r3, #0]
 80034ba:	685b      	ldreq	r3, [r3, #4]
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	bf04      	itt	eq
 80034c0:	1949      	addeq	r1, r1, r5
 80034c2:	6021      	streq	r1, [r4, #0]
 80034c4:	6054      	str	r4, [r2, #4]
 80034c6:	e7ca      	b.n	800345e <_free_r+0x26>
 80034c8:	b003      	add	sp, #12
 80034ca:	bd30      	pop	{r4, r5, pc}
 80034cc:	20000150 	.word	0x20000150

080034d0 <sbrk_aligned>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4e0e      	ldr	r6, [pc, #56]	; (800350c <sbrk_aligned+0x3c>)
 80034d4:	460c      	mov	r4, r1
 80034d6:	6831      	ldr	r1, [r6, #0]
 80034d8:	4605      	mov	r5, r0
 80034da:	b911      	cbnz	r1, 80034e2 <sbrk_aligned+0x12>
 80034dc:	f000 f8bc 	bl	8003658 <_sbrk_r>
 80034e0:	6030      	str	r0, [r6, #0]
 80034e2:	4621      	mov	r1, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	f000 f8b7 	bl	8003658 <_sbrk_r>
 80034ea:	1c43      	adds	r3, r0, #1
 80034ec:	d00a      	beq.n	8003504 <sbrk_aligned+0x34>
 80034ee:	1cc4      	adds	r4, r0, #3
 80034f0:	f024 0403 	bic.w	r4, r4, #3
 80034f4:	42a0      	cmp	r0, r4
 80034f6:	d007      	beq.n	8003508 <sbrk_aligned+0x38>
 80034f8:	1a21      	subs	r1, r4, r0
 80034fa:	4628      	mov	r0, r5
 80034fc:	f000 f8ac 	bl	8003658 <_sbrk_r>
 8003500:	3001      	adds	r0, #1
 8003502:	d101      	bne.n	8003508 <sbrk_aligned+0x38>
 8003504:	f04f 34ff 	mov.w	r4, #4294967295
 8003508:	4620      	mov	r0, r4
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	20000154 	.word	0x20000154

08003510 <_malloc_r>:
 8003510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003514:	1ccd      	adds	r5, r1, #3
 8003516:	f025 0503 	bic.w	r5, r5, #3
 800351a:	3508      	adds	r5, #8
 800351c:	2d0c      	cmp	r5, #12
 800351e:	bf38      	it	cc
 8003520:	250c      	movcc	r5, #12
 8003522:	2d00      	cmp	r5, #0
 8003524:	4607      	mov	r7, r0
 8003526:	db01      	blt.n	800352c <_malloc_r+0x1c>
 8003528:	42a9      	cmp	r1, r5
 800352a:	d905      	bls.n	8003538 <_malloc_r+0x28>
 800352c:	230c      	movs	r3, #12
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	2600      	movs	r6, #0
 8003532:	4630      	mov	r0, r6
 8003534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003538:	4e2e      	ldr	r6, [pc, #184]	; (80035f4 <_malloc_r+0xe4>)
 800353a:	f000 f89d 	bl	8003678 <__malloc_lock>
 800353e:	6833      	ldr	r3, [r6, #0]
 8003540:	461c      	mov	r4, r3
 8003542:	bb34      	cbnz	r4, 8003592 <_malloc_r+0x82>
 8003544:	4629      	mov	r1, r5
 8003546:	4638      	mov	r0, r7
 8003548:	f7ff ffc2 	bl	80034d0 <sbrk_aligned>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	4604      	mov	r4, r0
 8003550:	d14d      	bne.n	80035ee <_malloc_r+0xde>
 8003552:	6834      	ldr	r4, [r6, #0]
 8003554:	4626      	mov	r6, r4
 8003556:	2e00      	cmp	r6, #0
 8003558:	d140      	bne.n	80035dc <_malloc_r+0xcc>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	4631      	mov	r1, r6
 800355e:	4638      	mov	r0, r7
 8003560:	eb04 0803 	add.w	r8, r4, r3
 8003564:	f000 f878 	bl	8003658 <_sbrk_r>
 8003568:	4580      	cmp	r8, r0
 800356a:	d13a      	bne.n	80035e2 <_malloc_r+0xd2>
 800356c:	6821      	ldr	r1, [r4, #0]
 800356e:	3503      	adds	r5, #3
 8003570:	1a6d      	subs	r5, r5, r1
 8003572:	f025 0503 	bic.w	r5, r5, #3
 8003576:	3508      	adds	r5, #8
 8003578:	2d0c      	cmp	r5, #12
 800357a:	bf38      	it	cc
 800357c:	250c      	movcc	r5, #12
 800357e:	4629      	mov	r1, r5
 8003580:	4638      	mov	r0, r7
 8003582:	f7ff ffa5 	bl	80034d0 <sbrk_aligned>
 8003586:	3001      	adds	r0, #1
 8003588:	d02b      	beq.n	80035e2 <_malloc_r+0xd2>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	442b      	add	r3, r5
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	e00e      	b.n	80035b0 <_malloc_r+0xa0>
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	1b52      	subs	r2, r2, r5
 8003596:	d41e      	bmi.n	80035d6 <_malloc_r+0xc6>
 8003598:	2a0b      	cmp	r2, #11
 800359a:	d916      	bls.n	80035ca <_malloc_r+0xba>
 800359c:	1961      	adds	r1, r4, r5
 800359e:	42a3      	cmp	r3, r4
 80035a0:	6025      	str	r5, [r4, #0]
 80035a2:	bf18      	it	ne
 80035a4:	6059      	strne	r1, [r3, #4]
 80035a6:	6863      	ldr	r3, [r4, #4]
 80035a8:	bf08      	it	eq
 80035aa:	6031      	streq	r1, [r6, #0]
 80035ac:	5162      	str	r2, [r4, r5]
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	4638      	mov	r0, r7
 80035b2:	f104 060b 	add.w	r6, r4, #11
 80035b6:	f000 f865 	bl	8003684 <__malloc_unlock>
 80035ba:	f026 0607 	bic.w	r6, r6, #7
 80035be:	1d23      	adds	r3, r4, #4
 80035c0:	1af2      	subs	r2, r6, r3
 80035c2:	d0b6      	beq.n	8003532 <_malloc_r+0x22>
 80035c4:	1b9b      	subs	r3, r3, r6
 80035c6:	50a3      	str	r3, [r4, r2]
 80035c8:	e7b3      	b.n	8003532 <_malloc_r+0x22>
 80035ca:	6862      	ldr	r2, [r4, #4]
 80035cc:	42a3      	cmp	r3, r4
 80035ce:	bf0c      	ite	eq
 80035d0:	6032      	streq	r2, [r6, #0]
 80035d2:	605a      	strne	r2, [r3, #4]
 80035d4:	e7ec      	b.n	80035b0 <_malloc_r+0xa0>
 80035d6:	4623      	mov	r3, r4
 80035d8:	6864      	ldr	r4, [r4, #4]
 80035da:	e7b2      	b.n	8003542 <_malloc_r+0x32>
 80035dc:	4634      	mov	r4, r6
 80035de:	6876      	ldr	r6, [r6, #4]
 80035e0:	e7b9      	b.n	8003556 <_malloc_r+0x46>
 80035e2:	230c      	movs	r3, #12
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4638      	mov	r0, r7
 80035e8:	f000 f84c 	bl	8003684 <__malloc_unlock>
 80035ec:	e7a1      	b.n	8003532 <_malloc_r+0x22>
 80035ee:	6025      	str	r5, [r4, #0]
 80035f0:	e7de      	b.n	80035b0 <_malloc_r+0xa0>
 80035f2:	bf00      	nop
 80035f4:	20000150 	.word	0x20000150

080035f8 <_realloc_r>:
 80035f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035fc:	4680      	mov	r8, r0
 80035fe:	4614      	mov	r4, r2
 8003600:	460e      	mov	r6, r1
 8003602:	b921      	cbnz	r1, 800360e <_realloc_r+0x16>
 8003604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003608:	4611      	mov	r1, r2
 800360a:	f7ff bf81 	b.w	8003510 <_malloc_r>
 800360e:	b92a      	cbnz	r2, 800361c <_realloc_r+0x24>
 8003610:	f7ff ff12 	bl	8003438 <_free_r>
 8003614:	4625      	mov	r5, r4
 8003616:	4628      	mov	r0, r5
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800361c:	f000 f838 	bl	8003690 <_malloc_usable_size_r>
 8003620:	4284      	cmp	r4, r0
 8003622:	4607      	mov	r7, r0
 8003624:	d802      	bhi.n	800362c <_realloc_r+0x34>
 8003626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800362a:	d812      	bhi.n	8003652 <_realloc_r+0x5a>
 800362c:	4621      	mov	r1, r4
 800362e:	4640      	mov	r0, r8
 8003630:	f7ff ff6e 	bl	8003510 <_malloc_r>
 8003634:	4605      	mov	r5, r0
 8003636:	2800      	cmp	r0, #0
 8003638:	d0ed      	beq.n	8003616 <_realloc_r+0x1e>
 800363a:	42bc      	cmp	r4, r7
 800363c:	4622      	mov	r2, r4
 800363e:	4631      	mov	r1, r6
 8003640:	bf28      	it	cs
 8003642:	463a      	movcs	r2, r7
 8003644:	f7ff fed0 	bl	80033e8 <memcpy>
 8003648:	4631      	mov	r1, r6
 800364a:	4640      	mov	r0, r8
 800364c:	f7ff fef4 	bl	8003438 <_free_r>
 8003650:	e7e1      	b.n	8003616 <_realloc_r+0x1e>
 8003652:	4635      	mov	r5, r6
 8003654:	e7df      	b.n	8003616 <_realloc_r+0x1e>
	...

08003658 <_sbrk_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4d06      	ldr	r5, [pc, #24]	; (8003674 <_sbrk_r+0x1c>)
 800365c:	2300      	movs	r3, #0
 800365e:	4604      	mov	r4, r0
 8003660:	4608      	mov	r0, r1
 8003662:	602b      	str	r3, [r5, #0]
 8003664:	f7fd fab2 	bl	8000bcc <_sbrk>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_sbrk_r+0x1a>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	b103      	cbz	r3, 8003672 <_sbrk_r+0x1a>
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	20000158 	.word	0x20000158

08003678 <__malloc_lock>:
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <__malloc_lock+0x8>)
 800367a:	f000 b811 	b.w	80036a0 <__retarget_lock_acquire_recursive>
 800367e:	bf00      	nop
 8003680:	2000015c 	.word	0x2000015c

08003684 <__malloc_unlock>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <__malloc_unlock+0x8>)
 8003686:	f000 b80c 	b.w	80036a2 <__retarget_lock_release_recursive>
 800368a:	bf00      	nop
 800368c:	2000015c 	.word	0x2000015c

08003690 <_malloc_usable_size_r>:
 8003690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003694:	1f18      	subs	r0, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	bfbc      	itt	lt
 800369a:	580b      	ldrlt	r3, [r1, r0]
 800369c:	18c0      	addlt	r0, r0, r3
 800369e:	4770      	bx	lr

080036a0 <__retarget_lock_acquire_recursive>:
 80036a0:	4770      	bx	lr

080036a2 <__retarget_lock_release_recursive>:
 80036a2:	4770      	bx	lr

080036a4 <_init>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr

080036b0 <_fini>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	bf00      	nop
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr
